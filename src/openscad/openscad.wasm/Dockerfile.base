ARG EMSCRIPTEN_SDK_TAG=emscripten/emsdk

FROM ${EMSCRIPTEN_SDK_TAG} AS builder

ARG CMAKE_BUILD_TYPE=Release
ARG MESON_BUILD_TYPE=release
ARG EMSCRIPTEN_FLAGS="-fexceptions"

# -sUSE_PTHREADS=1 -lpthread -sWASM_WORKERS -sSHARED_MEMORY

# Install build tool and supporting files needed for building
# dependencies and using puppeteer.
# Puppeteer itself is not installed here, it can be added via
#
# npm init -y
# npm i puppeteer
# npx puppeteer browsers install chrome
#
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        automake \
        autopoint \
        bison \
        build-essential \
        ninja-build \
        ccache \
        cmake \
        flex \
        gettext \
        git \
        gperf \
        gpg \
	gpg-agent \
        libtool \
        ninja-build \
        pkg-config \
        prelink \
        python-is-python3 \
        python3 \
        python3-pip \
        texinfo \
        unzip \
        wget \
	libltdl-dev \
        libatk1.0-0 \
        libxkbcommon0 \
        libpango-1.0-0 \
        libatk-bridge2.0-0 \
        libxcomposite1 \
        libxdamage1 \
        libxfixes3 \
        libxrandr2 \
        libcairo2 \
        libdrm2 \
        libgbm1

RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install \
        meson \
        packaging

ENV CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
ENV MESON_BUILD_TYPE=${MESON_BUILD_TYPE}
ENV CFLAGS="${EMSCRIPTEN_FLAGS}"
ENV CXXFLAGS="${EMSCRIPTEN_FLAGS}"
ENV LDFLAGS="${EMSCRIPTEN_FLAGS}"

# Build autoconf from source since we require 2.72
WORKDIR /home/ubuntu
RUN wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.72.tar.xz
RUN tar -xf autoconf-2.72.tar.xz
RUN ls -al autoconf-2.72/
WORKDIR /home/ubuntu/autoconf-2.72/
RUN ./configure
RUN make
RUN sudo make install
WORKDIR /home/ubuntu


FROM builder AS boost
COPY boost .
RUN ./bootstrap.sh && \
    ./b2 \
      --disable-icu \
      --prefix=/emsdk/upstream/emscripten/cache/sysroot \
      --with-filesystem \
      --with-program_options \
      --with-regex \
      --with-system \
      address-model=32 \
      cxxflags="-std=c++17 -stdlib=libc++ -fexceptions" \
      install \
      link=static \
      linkflags="-stdlib=libc++ -fexceptions" \
      release \
      runtime-link=static \
      toolset=emscripten


FROM builder AS libexpat
COPY libexpat .
RUN cd expat && \
    ./buildconf.sh && \
    emconfigure ./configure \
        --without-docbook \
        --host wasm32-unknown-linux \
        --prefix=/emsdk/upstream/emscripten/cache/sysroot \
        --enable-shared=no \
        --disable-dependency-tracking && \
    emmake make && \
    emmake make install


FROM builder AS zlib
COPY zlib .
RUN emcmake cmake \
        -DINSTALL_PKGCONFIG_DIR="/emsdk/upstream/emscripten/cache/sysroot/lib/pkgconfig/" \
        -B ../build && \
    cmake --build ../build && \
    cmake --install ../build


FROM builder AS libzip
COPY --from=zlib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY libzip .
RUN emcmake cmake \
        -B ../build \
        -G Ninja && \
    cmake --build ../build --parallel && \
    cmake --install ../build

FROM builder AS libffi
COPY libffi .
RUN ./autogen.sh && \
    emconfigure ./configure \
      --host wasm32-unknown-linux \
      --prefix=/emsdk/upstream/emscripten/cache/sysroot \
      --enable-static \
      --disable-shared \
      --disable-dependency-tracking \
      --disable-builddir \
      --disable-multi-os-directory \
      --disable-raw-api \
      --disable-docs && \
    emmake make && \
    emmake make install SUBDIRS='include'


FROM builder AS glib
COPY --from=zlib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=libffi /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY glib .
COPY emscripten-crossfile.meson .
RUN meson \
      setup \
      ../build \
      --prefix=/emsdk/upstream/emscripten/cache/sysroot \
      --cross-file=emscripten-crossfile.meson \
      --default-library=static \
      --buildtype=${MESON_BUILD_TYPE} \
      --force-fallback-for=pcre2,gvdb \
      -Dselinux=disabled \
      -Dxattr=false \
      -Dlibmount=disabled \
      -Dnls=disabled \
      -Dtests=false \
      -Dglib_assert=false \
      -Dglib_checks=false && \
    meson install -C ../build


FROM builder AS freetype
COPY --from=zlib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY freetype .
RUN emcmake cmake \
        -B ../build \
        -DFT_REQUIRE_ZLIB=TRUE && \
    cmake --build ../build && \
    cmake --install ../build


FROM builder AS libxml2
COPY libxml2 .
RUN emcmake cmake \
        -B ../build \
        -G Ninja \
        -DLIBXML2_WITH_PYTHON=OFF \
        -DLIBXML2_WITH_LZMA=OFF \
        -DLIBXML2_WITH_ZLIB=OFF && \
    cmake --build ../build --parallel && \
    cmake --install ../build


FROM builder AS fontconfig
COPY --from=zlib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=freetype /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=libxml2 /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY fontconfig .
ENV FREETYPE_CFLAGS="-I/emsdk/upstream/emscripten/cache/sysroot/include/freetype2"
ENV FREETYPE_LIBS="-lfreetype -lz"
RUN emconfigure ./autogen.sh \
        --host none \
        --disable-docs \
        --disable-shared \
        --enable-static \
        --sysconfdir=/ \
        --localstatedir=/ \
        --with-default-fonts=/fonts \
        --enable-libxml2 \
        --prefix=/emsdk/upstream/emscripten/cache/sysroot && \
    emmake make && \
    emmake make install


FROM builder AS cairo
COPY --from=glib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=fontconfig /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=freetype /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=libexpat /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY cairo .
COPY emscripten-crossfile.meson .
RUN meson \
      setup \
      ../build \
      --prefix=/emsdk/upstream/emscripten/cache/sysroot \
      --cross-file=emscripten-crossfile.meson \
      --default-library=static \
      --buildtype=${MESON_BUILD_TYPE} \
      -Dtests=disabled && \
    meson install -C ../build
  

FROM builder AS harfbuzz
COPY --from=freetype /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY harfbuzz .
RUN emcmake cmake \
        -B ../build \
        -G Ninja \
        -DHB_HAVE_FREETYPE=ON && \
    cmake --build ../build --parallel && \
    cmake --install ../build


FROM builder AS eigen
COPY eigen .
RUN emcmake cmake \
        -B ../build \
        -G Ninja \
        -DCMAKE_INSTALL_PREFIX=/emsdk/upstream/emscripten/cache/sysroot && \
    cmake --build ../build --parallel && \
    cmake --install ../build && \
    ln -s /emsdk/upstream/emscripten/cache/sysroot/include/eigen3/Eigen /emsdk/upstream/emscripten/cache/sysroot/include/Eigen


FROM builder AS cgal
COPY cgal .
RUN emcmake cmake \
        -B ../build \
        -G Ninja && \
    cmake --build ../build --parallel && \
    cmake --install ../build


FROM builder AS gmp
COPY gmp .
RUN emconfigure ./configure \
        --disable-assembly \
        --host none \
        --enable-cxx --prefix=/emsdk/upstream/emscripten/cache/sysroot \
        HOST_CC=gcc && \
    make && \
    make install


FROM builder AS mpfr
COPY --from=gmp /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY mpfr .
RUN emconfigure ./configure \
        --host none \
        --with-gmp=/emsdk/upstream/emscripten/cache/sysroot \
        --prefix=/emsdk/upstream/emscripten/cache/sysroot && \
    make && \
    make install


FROM builder AS doubleconversion
COPY doubleconversion .
RUN emcmake cmake \
        -B ../build \
        -G Ninja && \
    cmake --build ../build --parallel && \
    cmake --install ../build


FROM builder AS lib3mf
COPY --from=zlib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=libzip /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY lib3mf .
RUN emcmake cmake \
        -B ../build \
        -DLIB3MF_TESTS=OFF \
        -DUSE_INCLUDED_ZLIB=OFF \
        -DUSE_INCLUDED_LIBZIP=OFF \
        -G Ninja && \
    cmake --build ../build --parallel && \
    cmake --install ../build


FROM builder AS wasm-base
COPY --from=boost /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=gmp /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=mpfr /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=cgal /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=eigen /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=harfbuzz /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=fontconfig /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=glib /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=libzip /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=libffi /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=doubleconversion /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
COPY --from=lib3mf /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
# COPY --from=freetype /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
# COPY --from=cairo /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot
# COPY --from=libexpat /emsdk/upstream/emscripten/cache/sysroot /emsdk/upstream/emscripten/cache/sysroot